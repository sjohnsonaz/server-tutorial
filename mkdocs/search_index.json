{
    "docs": [
        {
            "location": "/",
            "text": "Server Tutorial",
            "title": "Home"
        },
        {
            "location": "/#server-tutorial",
            "text": "",
            "title": "Server Tutorial"
        },
        {
            "location": "/0-Overview/0.0-Getting-Started/",
            "text": "For this tutorial, you will need several services.\n\n\n\n\nDomain Hosting\n\n\nCompute Hosting\n\n\nSource Control Hosting\n\n\nContinuous Integration/Deployment Hosting\n\n\n\n\nThis has been written with Google Domains, Microsoft Azure, and GitLab in mind, but it should be easily adapted to other services.\n\n\nCreate Domain\n\n\nAt your Domain Hosting company, create a new Domain Name.\n\n\nCreate Server\n\n\nIn your hosting company's control panel, create a new Server or Virtual Machine.  For this tutorial, we are specifically targeting \nUbuntu 16.4\n, although it may apply to other versions as well.\n\n\nThis new Virtual Machine should come with a public IP address.  Copy that IP, and go back to your DNS Settings for your Domain.  Store it as the \n@\n record in the \nA Names\n section.\n\n\nCreate Project Hosting\n\n\nThere is a large a variety of quality Source Control companies.  GitLab, GitHub, and BitBucket are all very solid solutions which provide free options.\n\n\nHowever, for simplicity, GitLab provides free private repositories, as well as Continuous Integration Hosting.  Furthermore, if you are hosting your source at GitHub or BitBucket, GitLab with synchronize with those companies.  For this tutorial, we specifically target GitLab hosting.",
            "title": "Getting Started"
        },
        {
            "location": "/0-Overview/0.0-Getting-Started/#create-domain",
            "text": "At your Domain Hosting company, create a new Domain Name.",
            "title": "Create Domain"
        },
        {
            "location": "/0-Overview/0.0-Getting-Started/#create-server",
            "text": "In your hosting company's control panel, create a new Server or Virtual Machine.  For this tutorial, we are specifically targeting  Ubuntu 16.4 , although it may apply to other versions as well.  This new Virtual Machine should come with a public IP address.  Copy that IP, and go back to your DNS Settings for your Domain.  Store it as the  @  record in the  A Names  section.",
            "title": "Create Server"
        },
        {
            "location": "/0-Overview/0.0-Getting-Started/#create-project-hosting",
            "text": "There is a large a variety of quality Source Control companies.  GitLab, GitHub, and BitBucket are all very solid solutions which provide free options.  However, for simplicity, GitLab provides free private repositories, as well as Continuous Integration Hosting.  Furthermore, if you are hosting your source at GitHub or BitBucket, GitLab with synchronize with those companies.  For this tutorial, we specifically target GitLab hosting.",
            "title": "Create Project Hosting"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/",
            "text": "This tutorial has been specifically written for \nUbuntu 16.4\n, although it may apply to other versions as well.  For all commands and code examples, replace \n{{text}}\n with values specific to your project.\n\n\nCreate Server\n\n\nIf you haven't already, in your hosting company's control panel, create a new Server.\n\n\n\n\nNote: Make sure to open Ports 80 and 443 on the Server Firewall.\n\n\n\n\nInstall Server Software\n\n\nBecome an administrator\n\n\nsudo su\n\n\n\nPrepare for installation\n\n\napt-get update\napt-get upgrade\napt-get autoremove\n\n\n\nInstall Node\n\n\ncurl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -\napt-get install -y nodejs\ncd /etc\nmkdir node\n\n\n\nInstall Nginx\n\n\napt-get install nginx\n\n\n\nConfigure Server Software\n\n\nConfigure Nginx\n\n\ncd /etc/nginx/sites-available/\ntouch {{site name}}\nvim {{site name}}\n\n\n\nPaste this into the file.  Save by pressing ESC, and entering \n:wq\n.\n\n\nserver {\n    listen 80;\n\n    server_name {{site url}};\n\n    location / {\n        root /etc/node/{{site root}}/{{public folder}};\n        try_files $uri $uri/ @dynamic;\n        expires max;\n        access_log off;\n    }\n\n    location @dynamic {\n        proxy_pass http://localhost:{{site port}};\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n\n\n\n\nUpdate Enabled Sites\n\n\nln -s /etc/nginx/sites-available/{{site name}} /etc/nginx/sites-enabled/{{site name}}\nnginx -t\nnginx -s reload\n\n\n\nPrepare for Deployment\n\n\nCreate Deployment User\n\n\nadduser deployment\nusermod -aG sudo deployment\nchown -R deployment /etc/node/\nchgrp -R deployment /etc/node/\nsu deployment\n\n\n\nCreate project folder\n\n\nmkdir -p /etc/node/{{site root}}\n\n\n\nCreate SSH Keys\n\n\ncd /home/deployment\nssh-keygen -t rsa -C \"{{deployment email address}}\" -b 4096\n\n\n\nStore the output of these two commands for use\n\n\ncat ~/.ssh/id_rsa.pub\ncat ~/.ssh/id_rsa\n\n\n\nInstall SSH Keys\n\n\nssh-copy-id {{destination server}}\n\n\n\nExit back to admin user\n\n\nexit\n\n\n\nSet Up Deployment\n\n\nCreate a GitLab account and Log In.\n\n\nIn GitLab, go to \nProfile -> Settings -> SSH Keys\n.  Enter the value of \n~/.ssh/id_rsa.pub\n into \nKey\n.  \nTitle\n should populate automatically.  Click \nAdd key\n.\n\n\nCreate a Project.  In your project, go to \nSettings -> CI / CD\n.  Expand \nSecret variables\n.  Enter \nSTAGING_PRIVATE_KEY\n into \nKey\n.  Enter the value of \n~/.ssh/id_rsa\n into \nValue\n.  Click \nAdd new variable\n.\n\n\nCreate GitLab Deployment\n\n\nIn your project, create the file \n.gitlab-ci.yml\n.  Paste into that file:\n\n\nimage: node:latest\n\nservices:\n\ncache:\n  paths:\n  - node_modules/\n\ntest_async:\n  script:\n   - npm install\n   - npm test\n\nbefore_script:\n  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'\n  - mkdir -p ~/.ssh\n  - echo \"$STAGING_PRIVATE_KEY\" | tr -d '\\r' > ~/.ssh/id_rsa\n  - chmod 600 ~/.ssh/id_rsa\n  - eval \"$(ssh-agent -s)\"\n  - ssh-add ~/.ssh/id_rsa\n  - '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'\n\nstaging:\n  type: deploy\n  script:\n    - npm install\n    - npm run dev\n    - tar -zcf ../build.tar.gz ./ --exclude='.git/' --exclude='build.tar.gz'\n    - ssh deployment@{{destination server}} \"\n        cd /etc/node &&\n        rm -rf _tmp &&\n        mkdir -p _tmp/{{site root}}_new\"\n    - scp ../build.tar.gz deployment@{{destination server}}:/etc/node/_tmp\n    - ssh deployment@{{destination server}} \"\n        cd /etc/node/_tmp &&\n        tar -xzf build.tar.gz -C {{site root}}_new &&\n        rm build.tar.gz &&\n        mv /etc/node/{{site root}} {{site root}}_old &&\n        mv {{site root}}_new /etc/node/{{site root}} &&\n        cd ../ &&\n        rm -rf _tmp\"\n  only:\n  - master\n\n\n\n\nCommit the file, and allow GitLab to deploy it.\n\n\nStart Node Server\n\n\nInstall Node Site Runner\n\n\nnpm install -g pm2\nsu deployment\ntouch process.yml\nvim process.yml\n\n\n\nPaste this into the file.  Save by pressing ESC, and entering \n:wq\n.\n\n\napps:\n  - script: {{site root}}/{{main js file}}\n    instances: 4\n    exec_mode: cluster\n    watch: true\n    env:\n      NODE_ENV: development\n    env_production:\n      NODE_ENV: production\n\n\n\n\nExit back to admin\n\n\nexit\n\n\n\nCreate SSL Certificate\n\n\nCreate Certificate\n\n\napt-get install software-properties-common\nadd-apt-repository ppa:certbot/certbot\napt-get update\napt-get install python-certbot-nginx\ncertbot certonly --webroot -w /etc/node/{{site root}}/{{public folder]/ -d {{site url}}\ncertbot --nginx\n\n\n\nRenew Certificate\n\n\ncertbot renew",
            "title": "Server Creation"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#create-server",
            "text": "If you haven't already, in your hosting company's control panel, create a new Server.   Note: Make sure to open Ports 80 and 443 on the Server Firewall.",
            "title": "Create Server"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#install-server-software",
            "text": "Become an administrator  sudo su  Prepare for installation  apt-get update\napt-get upgrade\napt-get autoremove  Install Node  curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -\napt-get install -y nodejs\ncd /etc\nmkdir node  Install Nginx  apt-get install nginx",
            "title": "Install Server Software"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#configure-server-software",
            "text": "Configure Nginx  cd /etc/nginx/sites-available/\ntouch {{site name}}\nvim {{site name}}  Paste this into the file.  Save by pressing ESC, and entering  :wq .  server {\n    listen 80;\n\n    server_name {{site url}};\n\n    location / {\n        root /etc/node/{{site root}}/{{public folder}};\n        try_files $uri $uri/ @dynamic;\n        expires max;\n        access_log off;\n    }\n\n    location @dynamic {\n        proxy_pass http://localhost:{{site port}};\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}  Update Enabled Sites  ln -s /etc/nginx/sites-available/{{site name}} /etc/nginx/sites-enabled/{{site name}}\nnginx -t\nnginx -s reload",
            "title": "Configure Server Software"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#prepare-for-deployment",
            "text": "Create Deployment User  adduser deployment\nusermod -aG sudo deployment\nchown -R deployment /etc/node/\nchgrp -R deployment /etc/node/\nsu deployment  Create project folder  mkdir -p /etc/node/{{site root}}  Create SSH Keys  cd /home/deployment\nssh-keygen -t rsa -C \"{{deployment email address}}\" -b 4096  Store the output of these two commands for use  cat ~/.ssh/id_rsa.pub\ncat ~/.ssh/id_rsa  Install SSH Keys  ssh-copy-id {{destination server}}  Exit back to admin user  exit",
            "title": "Prepare for Deployment"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#set-up-deployment",
            "text": "Create a GitLab account and Log In.  In GitLab, go to  Profile -> Settings -> SSH Keys .  Enter the value of  ~/.ssh/id_rsa.pub  into  Key .   Title  should populate automatically.  Click  Add key .  Create a Project.  In your project, go to  Settings -> CI / CD .  Expand  Secret variables .  Enter  STAGING_PRIVATE_KEY  into  Key .  Enter the value of  ~/.ssh/id_rsa  into  Value .  Click  Add new variable .",
            "title": "Set Up Deployment"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#create-gitlab-deployment",
            "text": "In your project, create the file  .gitlab-ci.yml .  Paste into that file:  image: node:latest\n\nservices:\n\ncache:\n  paths:\n  - node_modules/\n\ntest_async:\n  script:\n   - npm install\n   - npm test\n\nbefore_script:\n  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'\n  - mkdir -p ~/.ssh\n  - echo \"$STAGING_PRIVATE_KEY\" | tr -d '\\r' > ~/.ssh/id_rsa\n  - chmod 600 ~/.ssh/id_rsa\n  - eval \"$(ssh-agent -s)\"\n  - ssh-add ~/.ssh/id_rsa\n  - '[[ -f /.dockerenv ]] && echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" > ~/.ssh/config'\n\nstaging:\n  type: deploy\n  script:\n    - npm install\n    - npm run dev\n    - tar -zcf ../build.tar.gz ./ --exclude='.git/' --exclude='build.tar.gz'\n    - ssh deployment@{{destination server}} \"\n        cd /etc/node &&\n        rm -rf _tmp &&\n        mkdir -p _tmp/{{site root}}_new\"\n    - scp ../build.tar.gz deployment@{{destination server}}:/etc/node/_tmp\n    - ssh deployment@{{destination server}} \"\n        cd /etc/node/_tmp &&\n        tar -xzf build.tar.gz -C {{site root}}_new &&\n        rm build.tar.gz &&\n        mv /etc/node/{{site root}} {{site root}}_old &&\n        mv {{site root}}_new /etc/node/{{site root}} &&\n        cd ../ &&\n        rm -rf _tmp\"\n  only:\n  - master  Commit the file, and allow GitLab to deploy it.",
            "title": "Create GitLab Deployment"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#start-node-server",
            "text": "Install Node Site Runner  npm install -g pm2\nsu deployment\ntouch process.yml\nvim process.yml  Paste this into the file.  Save by pressing ESC, and entering  :wq .  apps:\n  - script: {{site root}}/{{main js file}}\n    instances: 4\n    exec_mode: cluster\n    watch: true\n    env:\n      NODE_ENV: development\n    env_production:\n      NODE_ENV: production  Exit back to admin  exit",
            "title": "Start Node Server"
        },
        {
            "location": "/0-Overview/0.1-Server-Creation/#create-ssl-certificate",
            "text": "Create Certificate  apt-get install software-properties-common\nadd-apt-repository ppa:certbot/certbot\napt-get update\napt-get install python-certbot-nginx\ncertbot certonly --webroot -w /etc/node/{{site root}}/{{public folder]/ -d {{site url}}\ncertbot --nginx  Renew Certificate  certbot renew",
            "title": "Create SSL Certificate"
        }
    ]
}